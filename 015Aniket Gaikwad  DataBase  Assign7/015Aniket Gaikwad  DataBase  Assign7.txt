CREATE DATABASE assignment7;
USE assignment7;

CREATE TABLE Ord_master(Ord_no INT (5), 
                        Cust_cd VARCHAR(10), 
                        Status VARCHAR(10) );
INSERT INTO Ord_master VALUES ( 1, "C1" , "P" );

CREATE TABLE Ord_dtl( Ord_no  INT (5), 
					  Prod_cd VARCHAR(10), 
                      Qty INT(10) 
                      );

CREATE TABLE  Prod_master(Prod_cd  VARCHAR (10) primary key,
						  Prod_name VARCHAR(10),  
						  Qty_in_stock INT(10), 
                          Booked_qty INT(10) );
INSERT INTO  Prod_master VALUES ( "P1", "Floppies" , 10000, 1000 );
INSERT INTO  Prod_master VALUES ( "P2", "Printers" , 5000, 600 );
INSERT INTO  Prod_master VALUES ( "P3", "Modems" , 3000, 200 );

-- QUE1 1. Write a Before Insert trigger on Ord_dtl. Anytime a row is inserted in Ord_dtl, the
-- Booked_qty in Prod_master should be increased accordingly.
DELIMITER $$
CREATE TRIGGER befoinsert_Ord_dtl BEFORE INSERT ON Ord_dtl
FOR EACH ROW
BEGIN
UPDATE Prod_master SET  Booked_qty=Booked_qty+new.Qty WHERE Prod_cd=NEW.Prod_cd ;
END $$ 
INSERT INTO Ord_dtl VALUES (1, "P1" , 100);
INSERT INTO  Ord_dtl VALUES ( 1, "P2" , 200 );
SELECT * FROM Ord_dtl;
SELECT * FROM Prod_master;

-- 2. Write a Before Delete trigger on Ord_dtl. Anytime a row is deleted from Ord_dtl, the
-- Booked_qty in Prod_master should be decreased accordingly.

DELIMITER $$
CREATE TRIGGER befdel_Ord_dtl BEFORE DELETE ON Ord_dtl
FOR EACH ROW
BEGIN
UPDATE Prod_master SET Booked_qty=Booked_qty-OLD.Qty WHERE Prod_cd=OLD.Prod_cd;
END $$
DELETE FROM Ord_dtl WHERE Prod_cd="P1";
DELETE FROM Ord_dtl WHERE Prod_cd="P2";
SELECT * FROM Ord_dtl;
SELECT * FROM Prod_master;

-- QUE3
--  3. write A trigger to update the total salary of a department in dept_sal  table  when an employee 
--   is added or removed from  emp table .
--  Create table dept_sal (dept_no, tota_salary) â€“ this table contains the total of salaries of employees 
--  working into that particular department

create table Department( dept_id int(4) primary key not null, dept_name varchar(20), totalsal int(10));
insert into Department value (1,"Finance",1000000);
insert into Department value (2,"Training",900000);
insert into Department value (3, "Marketing",1200000);

create table Employee ( empid int(4) not null, empname varchar(10) , dept_id int (4), salary int(4), manager int (4),
                            constraint pk_Employee  primary key (empid),
                            constraint fk_Employee foreign key (dept_id) references Department(dept_id)
                        );
insert into Employee values (1, "Arun", 1, 8000, 4);
insert into Employee values (2, "Kiran", 1,7000,1);
insert into Employee values (3, "Scott", 1,3000,1);
insert into Employee(empid,empname,dept_id,salary) values (4, "Max", 2,9000);
insert into Employee values (5, "Jack", 2,8000,4);
insert into Employee(empid,empname,salary,manager) values (6, "King" ,6000,1);

DELIMITER $$
CREATE TRIGGER ADD_UPD_EMP_SAL BEFORE INSERT ON Employee
FOR EACH ROW
BEGIN
UPDATE DEPARTMENT SET totalsal=totalsal+NEW.salary where dept_id=NEW.dept_id;
END $$
insert into Employee values (7, "Scott", 1,3000,1);
SELECT  * FROM DEPARTMENT;
SELECT  * FROM employee;

DELIMITER $$
CREATE TRIGGER RMV_EMP_UPD_SAL BEFORE DELETE ON EMPLOYEE
FOR EACH ROW
BEGIN
UPDATE DEPARTMENT SET totalsal=totalsal-old.salary where dept_id=OLD.dept_id;
END $$
DELETE FROM EMPLOYEE WHERE empid=7;
SELECT  * FROM DEPARTMENT;
SELECT  * FROM employee;

